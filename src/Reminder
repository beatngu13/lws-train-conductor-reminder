#!/usr/bin/env -S java --source 23

import java.io.IOException;
import java.io.UncheckedIOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpRequest.BodyPublishers;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.List;

public class Reminder {

	private record Officer(String userId, String username) {

		public boolean hasDiscordAccount() {
			return userId != null;
		}

	}

	private static final List<Officer> OFFICERS = List.of(
			new Officer("413827079688421376", "Nervengift"),
			new Officer("926965967618211950", "PopeofNope"),
			new Officer(null, "Chrille79"),
			new Officer("979853290139431003", "Carisma69"),
			new Officer("284646412233211906", "beatngu13"),
			new Officer("1279372492393156641", "DaMaddin"),
			new Officer("568776713455271946", "Dieser eine Lauch"),
			new Officer("572154754675900434", "Emeral Four"),
			new Officer("207834501651496961", "Pavwla"),
			new Officer("841000973660848208", "DESTROYERdev")
	);

	private static final String APP_TOKEN = System.getenv("APP_TOKEN");
	private static final String CHANNEL_ID = System.getenv("CHANNEL_ID");
	private static final String CHANNEL_URI = "https://discord.com/api/v10/channels/" + CHANNEL_ID + "/messages";

	public static void main(String[] args) {
		int index = getTodaysConductorIndex();
		Officer todaysConductor = OFFICERS.get(index);
		System.out.println("Today's train conductor is:");
		System.out.println(todaysConductor.username());
		boolean dryRun = Boolean.parseBoolean(args[0]);
		if (dryRun) {
			return;
		}
		postOnDiscord(todaysConductor);
	}

	private static int getTodaysConductorIndex() {
		ZoneId europeBerlin = ZoneId.of("Europe/Berlin");
		LocalDateTime now = LocalDateTime.now(europeBerlin);
		int year = now.getYear();
		int dayOfYear = now.getDayOfYear();
		int offset = 2;
		return (year + dayOfYear - offset) % OFFICERS.size();
	}

	private static void postOnDiscord(Officer todaysConductor) {
		try (HttpClient client = HttpClient.newHttpClient()) {
			String userString = todaysConductor.hasDiscordAccount()
					? "<@" + todaysConductor.userId() + ">"
					: todaysConductor.username() + " (has no Discord account)";
			String requestBody = "{\"content\": \"Today's train conductor is: " + userString + "\"}";
			HttpRequest request = HttpRequest.newBuilder()
					.uri(URI.create(CHANNEL_URI))
					.timeout(Duration.ofSeconds(10))
					.header("Content-Type", "application/json")
					.header("Accept", "application/json")
					.header("Authorization", "Bot " + APP_TOKEN)
					.POST(BodyPublishers.ofString(requestBody))
					.build();
			HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
			System.out.println("Request:");
			System.out.println("Body: " + requestBody);
			System.out.println("Response:");
			System.out.println("Body: " + response.body());
			System.out.println("Status: " + response.statusCode());
		} catch (IOException e) {
			throw new UncheckedIOException(e);
		} catch (InterruptedException e) {
			Thread.currentThread().interrupt();
			e.printStackTrace();
		}
	}

}
