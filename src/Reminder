#!/usr/bin/env -S java --source 23

import java.io.IOException;
import java.io.UncheckedIOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpRequest.BodyPublishers;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.List;

public class Reminder {

	public record TrainConductor(String discordUserId, String lwsUsername) {

		public boolean hasDiscordAccount() {
			return discordUserId != null;
		}

	}

	private static final List<TrainConductor> TRAIN_CONDUCTORS = List.of(
			new TrainConductor("413827079688421376", "Nervengift"),
			new TrainConductor("926965967618211950", "PopeofNope"),
			new TrainConductor(null, "Chrille79"),
			new TrainConductor("979853290139431003", "Carisma69"),
			new TrainConductor("284646412233211906", "beatngu13"),
			new TrainConductor("1279372492393156641", "DaMaddin"),
			new TrainConductor("568776713455271946", "Dieser eine Lauch"),
			new TrainConductor("572154754675900434", "Emeral Four"),
			new TrainConductor("207834501651496961", "Pavwla"),
			new TrainConductor("841000973660848208", "DESTROYERdev")
	);

	private static final String APP_TOKEN = System.getenv("APP_TOKEN");
	private static final String CHANNEL_ID = System.getenv("CHANNEL_ID");
	private static final String CHANNEL_URI = "https://discord.com/api/v10/channels/" + CHANNEL_ID + "/messages";

	public static void main(String[] args) {
		var reminder = new Reminder();
		var trainConductor = reminder.determineTodaysTrainConductor();
		System.out.println("Today's train conductor is: " + trainConductor.lwsUsername());
		boolean dryRun = Boolean.parseBoolean(args[0]);
		if (dryRun) {
			return;
		}
		reminder.postOnDiscord(trainConductor);
	}

	public TrainConductor determineTodaysTrainConductor() {
		ZoneId europeBerlin = ZoneId.of("Europe/Berlin");
		LocalDateTime now = LocalDateTime.now(europeBerlin);
		int year = now.getYear();
		int dayOfYear = now.getDayOfYear();
		int offset = 2;
		int index = (year + dayOfYear - offset) % TRAIN_CONDUCTORS.size();
		return TRAIN_CONDUCTORS.get(index);
	}

	public void postOnDiscord(TrainConductor trainConductor) {
		try (HttpClient client = HttpClient.newHttpClient()) {
			var requestBody = createRequestBody(trainConductor);
			var httpRequest = createHttpRequest(requestBody);
			System.out.println("Posting on discord...");
			var httpResponse = client.send(httpRequest, HttpResponse.BodyHandlers.ofString());
			System.out.println("Request body: " + requestBody);
			System.out.println("Response body: " + httpResponse.body());
			System.out.println("Status code: " + httpResponse.statusCode());
		} catch (IOException e) {
			throw new UncheckedIOException(e);
		} catch (InterruptedException e) {
			Thread.currentThread().interrupt();
			e.printStackTrace();
		}
	}

	private String createRequestBody(TrainConductor trainConductor) {
		String userString = trainConductor.hasDiscordAccount()
				? "<@" + trainConductor.discordUserId() + ">"
				: trainConductor.lwsUsername() + " (has no Discord account)";
		return "{\"content\": \"Today's train conductor is: " + userString + "\"}";
	}

	private HttpRequest createHttpRequest(String requestBody) {
		return HttpRequest.newBuilder()
				.uri(URI.create(CHANNEL_URI))
				.timeout(Duration.ofSeconds(10))
				.header("Content-Type", "application/json")
				.header("Accept", "application/json")
				.header("Authorization", "Bot " + APP_TOKEN)
				.POST(BodyPublishers.ofString(requestBody))
				.build();
	}

}
